8. Write a C program to implement the primitive operations of double ended queue



#include <stdio.h>
#include <conio.h>
#define MAX_SIZE 5
// Structure to represent the double-ended queue
struct Deque {
int items[MAX_SIZE];
int front, rear;
};
// Function to initialize the deque
void initializeDeque(struct Deque *deque) {
deque->front = -1;
deque->rear = -1;
}
// Function to check if the deque is empty
int isEmpty(struct Deque *deque) {
return (deque->front == -1 && deque->rear == -1);
}
// Function to check if the deque is full
int isFull(struct Deque *deque) {
return (deque->rear + 1) % MAX_SIZE == deque->front;
}
// Function to add an element to the front of the deque
void addFront(struct Deque *deque, int value) {
if (isFull(deque)) {
printf("\nDeque is full. Cannot add element to the front.\n");
} else {
if (isEmpty(deque)) {
deque->front = 0;
deque->rear = 0;
} else {
deque->front = (deque->front - 1 + MAX_SIZE) % MAX_SIZE;
}
deque->items[deque->front] = value;
printf("\n%d added to the front of the deque.\n", value);
}
}
// Function to add an element to the rear of the deque
void addRear(struct Deque *deque, int value) {
if (isFull(deque)) {
printf("\nDeque is full. Cannot add element to the rear.\n");
} else {
if (isEmpty(deque)) {
deque->front = 0;
deque->rear = 0;
} else {
deque->rear = (deque->rear + 1) % MAX_SIZE;
}
deque->items[deque->rear] = value;
printf("\n%d added to the rear of the deque.\n", value);
}
}
// Function to remove an element from the front of the deque
void removeFront(struct Deque *deque) {
if (isEmpty(deque)) {
printf("\nDeque is empty. Cannot remove element from the front.\n");
} else {
printf("\n%d removed from the front of the deque.\n", deque->items[deque->front]);
if (deque->front == deque->rear) {
// Deque becomes empty after removal
initializeDeque(deque);
} else {
deque->front = (deque->front + 1) % MAX_SIZE;
}
}
}
// Function to remove an element from the rear of the deque
void removeRear(struct Deque *deque) {
if (isEmpty(deque)) {
printf("\nDeque is empty. Cannot remove element from the rear.\n");
} else {
printf("\n%d removed from the rear of the deque.\n", deque->items[deque->rear]);
if (deque->front == deque->rear) {
// Deque becomes empty after removal
initializeDeque(deque);
} else {
deque->rear = (deque->rear - 1 + MAX_SIZE) % MAX_SIZE;
}
}
}
// Function to display the entire deque
void display(struct Deque *deque) {
if (isEmpty(deque)) {
printf("\nDeque is empty.\n");
} else {
int i = deque->front;
printf("\nDeque elements: ");
do {
printf("%d ", deque->items[i]);
i = (i + 1) % MAX_SIZE;
} while (i != (deque->rear + 1) % MAX_SIZE);
printf("\n");
}
}
int main() {
struct Deque deque;
initializeDeque(&deque);
int choice, value;
do {
printf("\nDouble-Ended Queue (Deque) Operations:\n");
printf("1. Add to Front\n");
printf("2. Add to Rear\n");
printf("3. Remove from Front\n");
printf("4. Remove from Rear\n");
printf("5. Display\n");
printf("6. Exit\n");
printf("Enter your choice: ");
scanf("%d", &choice);
switch (choice) {
case 1:
printf("\nEnter the element to be added to the front: ");
scanf("%d", &value);
addFront(&deque, value);
break;
case 2:
printf("\nEnter the element to be added to the rear: ");
scanf("%d", &value);
addRear(&deque, value);
break;
case 3:
removeFront(&deque);
break;
case 4:
removeRear(&deque);
break;
case 5:
display(&deque);
break;
case 6:
printf("\nExiting the program.\n");
break;
default:
printf("\nInvalid choice. Please enter a valid option.\n");
}
} while (choice != 6);
getch();
return 0;
}


