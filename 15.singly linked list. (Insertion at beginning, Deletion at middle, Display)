15.Write a C program to perform following operations on singly linked list.




Insertion at beginning
Deletion at middle
Display
#include <stdio.h>
#include <stdlib.h>
struct Node {
int data;
struct Node* next;
};
struct Node* createNode(int value) {
struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
if (newNode) {
newNode->data = value;
newNode->next = NULL;
}
return newNode;
}
void insertAtBeginning(struct Node** head, int value) {
struct Node* newNode = createNode(value);
if (newNode) {
newNode->next = *head;
*head = newNode;
printf("Inserted %d at the beginning.\n", value);
} else {
printf("Memory allocation failed.\n");
}
}
void deleteAtMiddle(struct Node** head) {
if (*head == NULL || (*head)->next == NULL) {
printf("List is empty or has only one element, cannot delete from middle.\n");
return;
}
struct Node* slow = *head;
struct Node* fast = *head;
struct Node* prev = NULL;
while (fast != NULL && fast->next != NULL) {
prev = slow;
slow = slow->next;
fast = fast->next->next;
}
if (prev != NULL) {
prev->next = slow->next;
free(slow);
printf("Deleted middle element.\n");
} else {
printf("List has only one element, cannot delete from middle.\n");
}
}
void display(struct Node* head) {
printf("List: ");
while (head != NULL) {
printf("%d -> ", head->data);
head = head->next;
}
printf("NULL\n");
}
void freeList(struct Node* head) {
struct Node* temp;
while (head != NULL) {
temp = head;
head = head->next;
free(temp);
}
}
int main() {
struct Node* head = NULL;
int value, choice;
do {
printf("\n1. Insert at the beginning\n");
printf("2. Delete at the middle\n");
printf("3. Display\n");
printf("4. Exit\n");
printf("Enter your choice: ");
scanf("%d", &choice);
switch (choice) {
case 1:
printf("Enter the value to insert: ");
scanf("%d", &value);
insertAtBeginning(&head, value);
break;
case 2:
deleteAtMiddle(&head);
break;
case 3:
display(head);
break;
case 4:
printf("Exiting the program.\n");
break;
default:
printf("Invalid choice. Please enter a valid option.\n");
}
} while (choice != 4);
// Free the memory
freeList(head);
return 0;
}

