
13. Write a C program to implement Josephus problem using stack



#include <stdio.h>
#include <stdlib.h>
#define MAX_SIZE 100
struct Stack {
int top;
int capacity;
int* array;
};
struct Stack* createStack(int capacity) {
struct Stack* stack = (struct Stack*)malloc(sizeof(struct Stack));
stack->capacity = capacity;
stack->top = -1;
stack->array = (int*)malloc(capacity * sizeof(int));
return stack;
}
int isFull(struct Stack* stack) {
return stack->top == stack->capacity - 1;
}
int isEmpty(struct Stack* stack) {
return stack->top == -1;
}
void push(struct Stack* stack, int item) {
if (isFull(stack)) {
printf("Stack Overflow\n");
return;
}
stack->array[++stack->top] = item;
}
int pop(struct Stack* stack) {
if (isEmpty(stack)) {
printf("Stack Underflow\n");
return -1;
}
return stack->array[stack->top--];
}
int josephus(int n, int k) {
struct Stack* stack = createStack(n);
for (int i = n; i >= 1; i--) {
push(stack, i);
}
int count = 0;
int survivor = 0;
while (!isEmpty(stack)) {
int popped = pop(stack);
count++;
if (count == k-1) {
count = 0;
survivor = popped-k;
} else {
push(stack, popped);
}
}
return survivor;
}
int main() {
int n, k;
printf("Enter the number of people (n): ");
scanf("%d", &n);
printf("Enter the counting interval (k): ");
scanf("%d", &k);
int survivor = josephus(n, k);
printf("The survivor is at position %d.\n", survivor);
return 0;
} 
