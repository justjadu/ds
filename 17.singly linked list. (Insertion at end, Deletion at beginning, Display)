17 . C program to perform the following operations on a singly linked list.



Insertion at end
Deletion at beginning
Display
#include <stdio.h>
#include <stdlib.h>
struct Node {
int data;
struct Node* next;
};
struct Node* createNode(int value) {
struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
if (newNode) {
newNode->data = value;
newNode->next = NULL;
}
return newNode;
}
void insertAtEnd(struct Node** head, int value) {
struct Node* newNode = createNode(value);
if (newNode) {
if (*head == NULL) {
// If the list is empty, make the new node the head
*head = newNode;
} else {
struct Node* temp = *head;
// Traverse to the end of the list
while (temp->next != NULL) {
temp = temp->next;
}
// Insert the new node at the end
temp->next = newNode;
}
printf("Inserted %d at the end.\n", value);
} else {
printf("Memory allocation failed.\n");
}
}
void deleteAtBeginning(struct Node** head) {
if (*head == NULL) {
printf("List is empty, cannot delete from beginning.\n");
return;
}
struct Node* temp = *head;
*head = (*head)->next;
free(temp);
printf("Deleted from the beginning.\n");
}
void display(struct Node* head) {
printf("List: ");
while (head != NULL) {
printf("%d -> ", head->data);
head = head->next;
}
printf("NULL\n");
}
void freeList(struct Node* head) {
struct Node* temp;
while (head != NULL) {
temp = head;
head = head->next;
free(temp);
}
}
int main() {
struct Node* head = NULL;
int value, choice;
do {
printf("\n1. Insert at the end\n");
printf("2. Delete at the beginning\n");
printf("3. Display\n");
printf("4. Exit\n");
printf("Enter your choice: ");
scanf("%d", &choice);
switch (choice) {
case 1:
printf("Enter the value to insert at the end: ");
scanf("%d", &value);
insertAtEnd(&head, value);
break;
case 2:
deleteAtBeginning(&head);
break;
case 3:
display(head);
break;
case 4:
printf("Exiting the program.\n");
break;
default:
printf("Invalid choice. Please enter a valid option.\n");
}
} while (choice != 4);
// Free the memory
freeList(head);
return 0;
}

