7.Write a C program to implement the primitive operations of circular queue


#include <stdio.h>
#include <conio.h>
#define MAX_SIZE 5
// Structure to represent the circular queue
struct CircularQueue {
int items[MAX_SIZE];
int front, rear;
};
// Function to initialize the circular queue
void initializeQueue(struct CircularQueue *queue) {
queue->front = -1;
queue->rear = -1;
}
// Function to check if the queue is empty
int isEmpty(struct CircularQueue *queue) {
return (queue->front == -1 && queue->rear == -1);
}
// Function to check if the queue is full
int isFull(struct CircularQueue *queue) {
return (queue->rear + 1) % MAX_SIZE == queue->front;
}
// Function to add an element to the queue (enqueue)
void Addq(struct CircularQueue *queue, int value) {
if (isFull(queue)) {
printf("\nQueue is full. Cannot add element.\n");
} else {
if (isEmpty(queue)) {
queue->front = 0;
}
queue->rear = (queue->rear + 1) % MAX_SIZE;
queue->items[queue->rear] = value;
printf("\n%d added to the queue.\n", value);
}
}
// Function to remove an element from the queue (dequeue)
void Delq(struct CircularQueue *queue) {
if (isEmpty(queue)) {
printf("\nQueue is empty. Cannot delete element.\n");
} else {
printf("\n%d deleted from the queue.\n", queue->items[queue->front]);
if (queue->front == queue->rear) {
// Queue becomes empty after deletion
initializeQueue(queue);
} else {
queue->front = (queue->front + 1) % MAX_SIZE;
}
}
}
// Function to display the entire queue
void display(struct CircularQueue *queue) {
if (isEmpty(queue)) {
printf("\nQueue is empty.\n");
} else {
int i = queue->front;
printf("\nQueue elements: ");
do {
printf("%d ", queue->items[i]);
i = (i + 1) % MAX_SIZE;
} while (i != (queue->rear + 1) % MAX_SIZE);
printf("\n");
}
}
int main() {
struct CircularQueue queue;
initializeQueue(&queue);
int choice, value;
do {
printf("\nCircular Queue Operations:\n");
printf("1. Addq (Enqueue)\n");
printf("2. Delq (Dequeue)\n");
printf("3. Display\n");
printf("4. Exit\n");
printf("Enter your choice: ");
scanf("%d", &choice);
switch (choice) {
case 1:
printf("\nEnter the element to be added to the queue: ");
scanf("%d", &value);
Addq(&queue, value);
break;
case 2:
Delq(&queue);
break;
case 3:
display(&queue);
break;
case 4:
printf("\nExiting the program.\n");
break;
default:
printf("\nInvalid choice. Please enter a valid option.\n");
}
} while (choice != 4);
getch();
return 0;
}
