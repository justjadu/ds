32.Write a C Program to implement Primâ€™s algorithm for min. spanning tree, in which a graph is represented using an adjacency list.



#include <stdio.h>
#include <stdlib.h>
#include <limits.h>

// Structure to represent a node in the adjacency list
struct Node {
    int dest;
    int weight;
    struct Node* next;
};

// Structure to represent an adjacency list
struct AdjList {
    struct Node* head;
};

// Structure to represent a graph
struct Graph {
    int V;
    struct AdjList* array;
};

// Structure to represent a node in the priority queue
struct MinHeapNode {
    int v;
    int key;
};

// Structure to represent a priority queue
struct MinHeap {
    int size;
    int capacity;
    int* pos;  // Used to track the position of nodes in the heap
    struct MinHeapNode** array;
};

// Function to create a new node in the adjacency list
struct Node* createNode(int dest, int weight) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->dest = dest;
    newNode->weight = weight;
    newNode->next = NULL;
    return newNode;
}

// Function to create a graph with V vertices
struct Graph* createGraph(int V) {
    struct Graph* graph = (struct Graph*)malloc(sizeof(struct Graph));
    graph->V = V;
    graph->array = (struct AdjList*)malloc(V * sizeof(struct AdjList));
    for (int i = 0; i < V; ++i)
        graph->array[i].head = NULL;
    return graph;
}

// Function to add an edge to the graph
void addEdge(struct Graph* graph, int src, int dest, int weight) {
    struct Node* newNode = createNode(dest, weight);
    newNode->next = graph->array[src].head;
    graph->array[src].head = newNode;

    newNode = createNode(src, weight);
    newNode->next = graph->array[dest].head;
    graph->array[dest].head = newNode;
}

// Function to create a new Min Heap Node
struct MinHeapNode* createMinHeapNode(int v, int key) {
    struct MinHeapNode* minHeapNode = (struct MinHeapNode*)malloc(sizeof(struct MinHeapNode));
    minHeapNode->v = v;
    minHeapNode->key = key;
    return minHeapNode;
}

// Function to create a Min Heap
struct MinHeap* createMinHeap(int capacity) {
    struct MinHeap* minHeap = (struct MinHeap*)malloc(sizeof(struct MinHeap));
    minHeap->pos = (int*)malloc(capacity * sizeof(int));
    minHeap->size = 0;
    minHeap->capacity = capacity;
    minHeap->array = (struct MinHeapNode**)malloc(capacity * sizeof(struct MinHeapNode*));
    return minHeap;
}

// Function to swap two nodes in the Min Heap
void swapMinHeapNode(struct MinHeapNode** a, struct MinHeapNode** b) {
    struct MinHeapNode* t = *a;
    *a = *b;
    *b = t;
}

// Function to heapify at a given index
void minHeapify(struct MinHeap* minHeap, int idx) {
    int smallest, left, right;
    smallest = idx;
    left = 2 * idx + 1;
    right = 2 * idx + 2;

    if (left < minHeap->size && minHeap->array[left]->key < minHeap->array[smallest]->key)
        smallest = left;

    if (right < minHeap->size && minHeap->array[right]->key < minHeap->array[smallest]->key)
        smallest = right;

    if (smallest != idx) {
        struct MinHeapNode* smallestNode = minHeap->array[smallest];
        struct MinHeapNode* idxNode = minHeap->array[idx];

        minHeap->pos[smallestNode->v] = idx;
        minHeap->pos[idxNode->v] = smallest;

        swapMinHeapNode(&minHeap->array[smallest], &minHeap->array[idx]);

        minHeapify(minHeap, smallest);
    }
}

// Function to check if the Min Heap is empty
int isEmpty(struct MinHeap* minHeap) {
    return minHeap->size == 0;
}

// Function to extract the minimum node from the Min Heap
struct MinHeapNode* extractMin(struct MinHeap* minHeap) {
    if (isEmpty(minHeap))
        return NULL;

    struct MinHeapNode* root = minHeap->array[0];
    struct MinHeapNode* lastNode = minHeap->array[minHeap->size - 1];

    minHeap->array[0] = lastNode;

    minHeap->pos[root->v] = minHeap->size - 1;
    minHeap->pos[lastNode->v] = 0;

    --minHeap->size;
    minHeapify(minHeap, 0);

    return root;
}

// Function to decrease the key value of a given vertex
void decreaseKey(struct MinHeap* minHeap, int v, int key) {
    int i = minHeap->pos[v];

    minHeap->array[i]->key = key;

    while (i && minHeap->array[i]->key < minHeap->array[(i - 1) / 2]->key) {
        minHeap->pos[minHeap->array[i]->v] = (i - 1) / 2;
        minHeap->pos[minHeap->array[(i - 1) / 2]->v] = i;

        swapMinHeapNode(&minHeap->array[i], &minHeap->array[(i - 1) / 2]);

        i = (i - 1) / 2;
    }
}

// Function to check if a given vertex is in the Min Heap
int isInMinHeap(struct MinHeap* minHeap, int v) {
    if (minHeap->pos[v] < minHeap->size)
        return 1;
    return 0;
}

// Function to print the edges of the Minimum Spanning Tree
void printMST(struct Graph* graph, int parent[]) {
    printf("Edges in the Minimum Spanning Tree:\n");
    for (int i = 1; i < graph->V; ++i)
        printf("%d -- %d\n", parent[i], i);
}

// Function to implement Prim's algorithm for Minimum Spanning Tree
void primMST(struct Graph* graph) {
    int V = graph->V;
    int parent[V];     // Array to store constructed MST
    int key[V];        // Key values used to pick the minimum weight edge in cut
    struct MinHeap* minHeap = createMinHeap(V);

    // Initialize all keys as INFINITE
    for (int v = 1; v < V; ++v) {
        parent[v] = -1;
        key[v] = INT_MAX;
        minHeap->array[v] = createMinHeapNode(v, key[v]);
        minHeap->pos[v] = v;
    }

    // Make key value of the first vertex 0
    key[0] = 0;
    minHeap->array[0] = createMinHeapNode(0, key[0]);
    minHeap->pos[0] = 0;

    minHeap->size = V;

    // Loop to extract the minimum key vertex and update its neighbors
    while (!isEmpty(minHeap)) {
        struct MinHeapNode* minHeapNode = extractMin(minHeap);
        int u = minHeapNode->v;

        struct Node* traverseNode = graph->array[u].head;
        while (traverseNode != NULL) {
            int v = traverseNode->dest;

            if (isInMinHeap(minHeap, v) && traverseNode->weight < key[v]) {
                key[v] = traverseNode->weight;
                parent[v] = u;
                decreaseKey(minHeap, v, key[v]);
            }

            traverseNode = traverseNode->next;
        }
    }

    // Print the Minimum Spanning Tree
    printMST(graph, parent);

    // Free allocated memory
    free(minHeap->array);
    free(minHeap->pos);
    free(minHeap);
}

int main() {
    int V = 5; // Number of vertices in the graph
    struct Graph* graph = createGraph(V);

    // Add edges and weights to the graph
    addEdge(graph, 0, 1, 2);
    addEdge(graph, 0, 3, 6);
    addEdge(graph, 1, 2, 3);
    addEdge(graph, 1, 3, 8);
    addEdge(graph, 1, 4, 5);
    addEdge(graph, 2, 4, 7);
    addEdge(graph, 3, 4, 9);

    // Run Prim's algorithm
    primMST(graph);

    // Free allocated memory
    free(graph->array);
    free(graph);

    return 0;
}

