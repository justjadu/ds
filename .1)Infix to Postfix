1./*INFIX TO POSTFIX EXPRESSION USING STACK*/



#include <stdio.h>
#include<conio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>
//#include <ctype.h>
#define bool int
#define true 1
#define false 0
int stack[100];
int top = -1;
int variableValues[26];  // Store variable values
int isFull() {
return top == 100 - 1;
}
int isEmpty() {
return top == -1;
}
void push(int element) {
if (!isFull()) {
top++;
stack[top] = element;
} else {
printf("Stack Overflow!\n");
exit(1);
}
}
int pop() {
if (!isEmpty()) {
int element = stack[top];
top--;
return element;
} else {
printf("Stack is Empty\n");
exit(1);
}
return 0;
}
int preference(char op) {
if (op == '^') {
return 3;
}
if (op == '*' || op == '/') {
return 2;
}
if (op == '+' || op == '-') {
return 1;
}
return 0;
}
void infixToPostfix(char infix[], char postfix[]) {
int i, j = 0;
char symbol, next;
for (i = 0; i < (int)strlen(infix); i++) {
symbol = infix[i];
if (!isspace(symbol)) {
switch (symbol) {
case '(':
case '[':
case '{':
push(symbol);
break;
case ')':
case ']':
case '}':
while (!isEmpty() && ((next = pop()) != '(') && (next != '[') && (next != '{')) {
postfix[j++] = next;
}
break;
case '+':
case '-':
case '*':
case '/':
case '^':
while (!isEmpty() && preference(stack[top]) >= preference(symbol)) {
postfix[j++] = pop();
}
push(symbol);
break;
default:
postfix[j++] = symbol;
}
}
}
while (!isEmpty()) {
postfix[j++] = pop();
}
postfix[j] = '\0';
}
int evaluate(char postfix[]) {
int i, a, b;
int x = strlen(postfix);
for (i = 0; i < x; i++) {
if (isalpha(postfix[i])) {
push(variableValues[postfix[i] - 'A']);
} else if (isdigit(postfix[i])) {
push(postfix[i] - '0');
} else {
a = pop();
b = pop();
switch (postfix[i]) {
case '+':
push(b + a);
break;
case '-':
push(b - a);
break;
case '*':
push(b * a);
break;
case '/':
push(b / a);
break;
case '^':
push(pow(b, a));
break;
}
}
}
return pop();
}

int main() {
int i,x,result;
char postfix[100];
char variable,infix[100],highestVariable;
clrscr();
printf("\nEnter Your Expression: ");
scanf("%s", infix);
infixToPostfix(infix, postfix);
printf("Postfix Expression: %s\n", postfix);
x = strlen(postfix);
highestVariable = 'A' - 1;
for (i = 0; i < x; i++) {
if (isalpha(postfix[i])) {
if (postfix[i] > highestVariable) {
highestVariable = postfix[i];
}
}
}
for (variable = 'A'; variable <= highestVariable; variable++) {
printf("Enter value for variable %c: ", variable);
scanf("%d", &variableValues[variable - 'A']);
}
result = evaluate(postfix);
printf("The result of postfix evaluation = %d\n", result);
getch();
return 0;
}
